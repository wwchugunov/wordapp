<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Загрузка файлов</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        p {
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f7fc;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 20px;
        }

        form {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px;
            box-sizing: border-box;
        }

        div {
            margin-bottom: 20px;
        }

        label {
            font-size: 16px;
            font-weight: bold;
            color: #34495e;
            display: block;
            margin-bottom: 8px;
        }

        input[type="file"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 14px;
            color: #34495e;
            background-color: #ecf0f1;
        }

        button {
            background-color: #3498db;
            color: #fff;
            border: none;
            padding: 12px 20px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #2980b9;
        }

        button:active {
            background-color: #1c5b87;
        }

        .box_info {
            padding: 40px;
        }

        .box_btn {
            display: flex;
        }

        .box_btn :nth-child(1) {
            margin-right: 10%;
        }
    </style>
</head>

<body>
    <div class="box_info">
        <p>Загрузите файлы для обработки</p>
        <div class="info">
            Всі файли виключно формату csv
            Файли реєстру виключно з таблицею без доп описів
        </div>
    </div>
    <form id="uploadForm" action="/upload" method="POST" enctype="multipart/form-data">
        <div>
            <label for="registry">Выберите реестр:</label>
            <input type="file" name="registryFiles" accept=".xlsx,.xls, .csv" multiple required>
        </div>
        <div>
            <label for="partnerQuery">Выберите запрос партнера:</label>
            <input type="file" name="requestFile" accept=".xlsx,.xls, .csv" multiple required>
        </div>
        <div class="box_btn">
            <button type="button" onclick="submitForm('c2a')">Загрузить c2a</button>
            <button type="button" onclick="submitForm('a2c')">Загрузить a2c</button>
        </div>
    </form>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>


        function showReport(data, type) {
    const unmatchedList = data.unmatched.map(item => `<li>${item.name} - ${item.status}</li>`).join('');

    Swal.fire({
        icon: 'info',
        title: 'Отчёт обработки',
        html: `
            <h4>Не найдено:</h4>
            <ul>${unmatchedList}</ul>
            <h4>${data.summary}</h4>
        `,
        confirmButtonText: 'Скачать файлы',
    }).then(() => {
        downloadFiles(type);
    });
}

function downloadFiles(type) {
    const form = document.getElementById('uploadForm');
    const formData = new FormData(form);
    const queryParams = new URLSearchParams({ type });

    // Показать окно загрузки
    Swal.fire({
        title: 'Загрузка...',
        text: 'Файлы формируются, пожалуйста, подождите.',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        },
    });

    fetch(`/upload?${queryParams.toString()}`, {
        method: 'POST',
        body: formData,
    })
        .then(response => {
            if (!response.ok) {
                throw new Error('Ошибка при скачивании файла');
            }
            return response.blob();
        })
        .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = 'documents.zip'; // Укажите имя файла
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);

            // Закрыть окно загрузки
            Swal.close();
        })
        .catch(err => {
            Swal.fire({
                icon: 'error',
                title: 'Ошибка',
                text: `Не удалось скачать файл: ${err.message}`,
            });
        });
}

function submitForm(type) {
    const form = document.getElementById('uploadForm');
    const formData = new FormData(form);
    const queryParams = new URLSearchParams({ type, report: 'true' });

    fetch(`/upload?${queryParams.toString()}`, {
        method: 'POST',
        body: formData,
    })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errData => {
                    throw new Error(errData.error || 'Ошибка обработки');
                });
            }
            return response.json();
        })
        .then(data => showReport(data, type))
        .catch(err => {
            Swal.fire({
                icon: 'error',
                title: 'Ошибка',
                text: `Произошла ошибка: ${err.message}`,
            });
        });
}

    </script>
    

</body>

</html>
